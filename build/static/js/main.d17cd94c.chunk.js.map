{"version":3,"sources":["weather/weather.jsx","weather/weatherEngine.jsx","components/textField/textField.js","components/todos/todoList.js","components/todos/dropDown.js","components/loading/loading.js","components/getRamdonUser/getRandomUser.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","cls","img","temp","className","id","error","city","country","src","alt","feelsLike","type","WeatherEngine","intialSearch","useState","search","searchCity","childSearch","childSearchCity","weather","setWeather","getWeather","q","a","checkCharPattern","checkNumPattern","checkPatteren","match","console","log","Boolean","checkUserValue","isNaN","fetch","apiRes","json","resJson","updateweather","then","res","main","sys","feels_like","name","message","useEffect","Math","random","onFocus","e","target","value","classList","inputFocus","onChange","htmlFor","onClick","preventDefault","childChange","getValue","clickBack","Promise","reslove","reject","response","catch","result","inputValue","forwardRefInput","React","forwardRef","ref","inputLabel","buttonLabel","inputAttrs","buttonAttrs","labelAttrs","setInput","input","clickHandler","loading","charAt","toUpperCase","slice","TodoList","todo","setTodo","inputRef","filterList","setEdit","setgeteditId","completedHandler","map","data","toString","completed","removeTodo","filter","editHandler","text","current","focus","setTimeout","select","DropDown","setSelect","Loading","GetRandomUser","user","setUser","results","setResults","fetchNextData","page","newResults","length","first","picture","thumbnail","info","App","localTodos","JSON","parse","window","localStorage","getItem","useRef","setFilterList","setloading","edit","geteditId","setItem","stringify","dropDownHandler","addTodoHandler","floor","onKeyPress","event","charCode","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d17cd94c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Weather = (props) => {\n    let cls = 'cold';\n    let img ='';\n    if(props.temp > 12) {\n        cls = \"hot\"\n        img= 'sunny'\n    } else  if (props.temp <= 12) {\n        cls = 'cold'\n        img = 'cloud'\n    }\n    \n    return (<div  className=\"wa-wrapper\">\n        <div id={props.id} className={`weather-main ${cls} ${props.temp !== '' ? 'flip' : ''}`}>\n            {/* Search weather from child component */}\n            {/* <input id={props.id} value={props.inputValue} onChange={(e => props.childChange(e.target.value))} />\n            <button onClick={e => props.clickBack(e)}>Search</button> */}\n\n            {props.temp === '' ? \n                <div className=\"spinner\"></div> : props.error ? \n                <div className=\"error\">{props.error}</div>\n                : <div className=\"fade-in\">\n                    <div className=\"weather-city\">\n                        <h2>{props.city}</h2>\n                        <h4>{props.country}</h4>\n                    </div>\n                    <img src={`./images/${img}.png`} alt=\"\" className=\"weather-logo\" />\n                    <h2 className=\"weather-temp\">\n                        {`${props.temp} °C`}\n                    </h2>\n                    <h4>{`Feels like ${props.feelsLike} °C`}</h4>\n                    <div className=\"weather-type\">\n                        {props.type}\n                    </div>\n                </div>}\n        </div>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useState, useEffect } from \"react\";\nimport Weather from \"./weather.jsx\";\n\nfunction WeatherEngine(props) {\n  const intialSearch = props.intialSearch;\n  const [search, searchCity] = useState(intialSearch);\n  const [childSearch, childSearchCity] = useState(intialSearch);\n  const [weather, setWeather] = useState({\n    temp: \"\",\n    type: \"\",\n    country: \"\",\n    feelsLike: \"\",\n    city: \"\",\n    id: \"\",\n    error: \"\",\n  });\n\n  // get the child Component input search value\n  const getChildInputValue = (getValue) => {\n    childSearchCity(getValue);\n  };\n\n  // get data using Promiseses\n  function updatePromise(e) {\n    //console.log(childSearch)\n    const promise = new Promise((reslove, reject) => {\n      reslove(\n        fetch(\n          `http://api.timezonedb.com/v2.1/get-time-zone?key=P75QOPRLSKVS&format=json&by=zone&zone=America/${childSearch}`\n        )\n          .then((response) => {\n            return response.json();\n          })\n          .catch((e) => e)\n      );\n    });\n    promise.then((result) => {\n      console.log(result);\n    });\n  }\n\n  {\n    /* Make API call using Promise */\n  }\n\n  const getWeather = async (q) => {\n    //console.log(isNaN(search))\n    let checkUserValue;\n    const checkCharPattern = /[1-9]/g;\n    const checkNumPattern = /[a-z, A-Z]/gi;\n    const checkPatteren =\n      search.match(checkCharPattern) && search.match(checkNumPattern);\n    console.log(Boolean(checkPatteren));\n    if (isNaN(search)) {\n      checkUserValue = `q=${search}`;\n    } else {\n      checkUserValue = `zip=${search}`;\n    }\n    const apiRes = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?${checkUserValue}&units=metric&APPID=e04a7cbcb82de0f319fb66a3e5d643fe`\n    );\n    const resJson = await apiRes.json();\n    return resJson;\n  };\n\n  // Update the weather each time user search\n  const updateweather = (search) => {\n    getWeather(search).then((res) => {\n      // console.log(res)\n      return res.main\n        ? setWeather({\n            temp: res.main.temp,\n            type: res.weather[0][\"main\"],\n            country: res.sys.country,\n            feelsLike: res.main.feels_like,\n            city: res.name,\n            id: res.id,\n          })\n        : setWeather({\n            error: res.message,\n          });\n    });\n  };\n\n  // OnClick of search button this function calls updateweather method and return new data\n  const handleSearch = (event) => {\n    event.preventDefault();\n    updateweather(search);\n  };\n\n  // It will  execute only onload to update default search\n  useEffect(() => {\n    updateweather(intialSearch);\n  }, [intialSearch]);\n  const inputFocus = (e) => {\n    if (e.target.value !== \"\") {\n      e.target.classList.value = \"focused\";\n      console.log(e.target.classList);\n    }\n  };\n  const id = `search-${Math.random() * 3}`;\n  return (\n    <div>\n      <div className=\"App\">\n        <form className=\"search\">\n          <input\n            id={id}\n            onFocus={(e) => inputFocus(e)}\n            type=\"text\"\n            value={search}\n            onChange={(e) => searchCity(e.target.value)}\n            className={search ? \"focused\" : \"\"}\n          />\n          <label htmlFor={id}>Zipcode or City</label>\n          <button onClick={(e) => handleSearch(e)}>Search</button>\n        </form>\n        <Weather\n          temp={weather.temp}\n          type={weather.type}\n          city={weather.city}\n          country={weather.country}\n          feelsLike={weather.feelsLike}\n          id={weather.id}\n          error={weather.error}\n          childChange={getChildInputValue}\n          clickBack={updatePromise}\n          inputValue={childSearch}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherEngine;\n","import React from \"react\";\nconst TextField = (\n  {\n    inputLabel = \"Enter the value\",\n    buttonLabel,\n    inputAttrs,\n    buttonAttrs,\n    labelAttrs,\n    setInput,\n    input,\n    clickHandler,\n    loading,\n  },\n  ref\n) => {\n  return (\n    <div className=\"textfeild-wrapper\">\n      <input\n        {...inputAttrs}\n        id=\"123\"\n        className={input ? \"focused textfeild-box\" : \"textfeild-box\"}\n        onChange={(e) =>\n          setInput(\n            e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\n          )\n        }\n        value={input}\n        ref={ref}\n      />\n      <label className=\"textfeild-label\" {...labelAttrs}>\n        {inputLabel}\n      </label>\n      {buttonLabel && !loading ? (\n        <button\n          {...buttonAttrs}\n          onClick={clickHandler}\n          className=\"textfield-button\"\n        >\n          {buttonLabel}\n        </button>\n      ) : (\n        <i className=\"spinner\"></i>\n      )}\n    </div>\n  );\n};\n\nconst forwardRefInput = React.forwardRef(TextField);\n\nexport default forwardRefInput;\n","import React from \"react\";\nimport \"./todoList.scss\";\n\nconst TodoList = ({\n  todo,\n  setInput,\n  setTodo,\n  inputRef,\n  filterList,\n  setEdit,\n  setgeteditId,\n}) => {\n  const completedHandler = (e) => {\n    setTodo(\n      todo.map((data) => {\n        if (data.id.toString() === e.target.id.toString()) {\n          return { ...data, completed: !data.completed };\n        }\n        return data;\n      })\n    );\n  };\n\n  const removeTodo = (e) => {\n    const removeTodo = todo.filter((data) => {\n      return data.id.toString() !== e.target.id.toString();\n    });\n    setTodo(removeTodo);\n  };\n\n  const editHandler = (e) => {\n    setgeteditId(e.target.id);\n    todo.map((data) => {\n      if (data.id.toString() === e.target.id.toString()) {\n        setEdit(true);\n        setInput(data.text);\n        inputRef.current.focus();\n        setTimeout(() => {\n          inputRef.current.select();\n        }, 100);\n      }\n    });\n  };\n\n  return [\n    <div className=\"todo-list-title\">Todo Lists</div>,\n    <div className=\"todo-list-wrapper\">\n      {filterList.map((todo) => (\n        <div id={todo.id} className=\"todo-list-container\">\n          <div className=\"todo-list\">\n            <div className={todo.completed ? \"todo-completed\" : \"\"}>\n              {todo.text}\n            </div>\n            <span>\n              <i\n                id={todo.id}\n                onClick={(e) => removeTodo(e)}\n                className=\"fas fa-trash delete\"\n              ></i>\n              <i\n                onClick={(e) => completedHandler(e)}\n                id={todo.id}\n                className={\n                  todo.completed\n                    ? \"fas fa-undo undo\"\n                    : \"fas fa-check-circle completed\"\n                }\n              ></i>\n              <i\n                onClick={(e) => editHandler(e)}\n                className=\"fas fa-edit edit\"\n                id={todo.id}\n              ></i>\n            </span>\n          </div>\n        </div>\n      ))}\n    </div>,\n  ];\n};\nexport default TodoList;\n","import React from \"react\";\n\nconst DropDown = ({ select, setSelect }) => {\n  const selectHandler = (e) => {\n    setSelect(e.target.value);\n  };\n  return (\n    <select\n      className=\"dropdown-selector\"\n      onChange={selectHandler}\n      value={select}\n    >\n      <option>All</option>\n      <option>Completed</option>\n      <option>Uncompleted</option>\n    </select>\n  );\n};\n\nexport default DropDown;\n","import React from \"react\";\nimport \"./loading.scss\";\n\nfunction Loading({ text }) {\n  return (\n    <div className=\"loading\">\n      <div className=\"loading-text\">{text}</div>\n      <span>.</span>\n      <span>.</span>\n      <span>.</span>\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, { useState, useEffect } from \"react\";\n\nconst GetRandomUser = () => {\n  const [user, setUser] = useState([]);\n  const [results, setResults] = useState([]);\n\n  const fetchNextData = (page = 1) => {\n    fetch(`https://randomuser.me/api?page=${page}`)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        setUser(data);\n        const newResults = [...results, ...data.results];\n        setResults(newResults);\n      });\n\n    // fetch(\"https://worldwide-restaurants.p.rapidapi.com/detail\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"content-type\": \"application/x-www-form-urlencoded\",\n    //     \"x-rapidapi-key\": \"6e8c986419mshb869ae0a7920fd2p120061jsn508421ba8f21\",\n    //     \"x-rapidapi-host\": \"worldwide-restaurants.p.rapidapi.com\",\n    //   },\n    //   body: {\n    //     currency: \"USD\",\n    //     language: \"en_US\",\n    //     location_id: \"15333482\",\n    //   },\n    // })\n    //   .then((response) => {\n    //     return response;\n    //   })\n    //   .then((data) => {\n    //     console.log(data.json());\n    //   });\n  };\n\n  useEffect(() => {\n    fetchNextData();\n    // console.log(\"hello\");\n  }, []);\n\n  return user ? (\n    <div className=\"user-data\">\n      {results.length !== 0 ? (\n        results.map((user) => {\n          return (\n            <div className=\"user-info\">\n              <div>Name: {user.name.first}</div>\n              <img src={user.picture.thumbnail} alt=\"\" />\n            </div>\n          );\n        })\n      ) : (\n        <i className=\"spinner load\"></i>\n      )}\n\n      <button\n        onClick={() => fetchNextData(user.info.page + 1)}\n        className=\"data-button\"\n      >\n        Get new user\n      </button>\n    </div>\n  ) : (\n    \"\"\n  );\n};\n\nexport default GetRandomUser;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport WeatherEngine from \"./weather/weatherEngine.jsx\";\nimport \"./App.scss\";\nimport TextField from \"./components/textField/textField.js\";\nimport TodoList from \"./components/todos/todoList\";\nimport DropDown from \"./components/todos/dropDown\";\nimport Loading from \"./components/loading/loading\";\nimport GetRandomUser from \"./components/getRamdonUser/getRandomUser\";\n\nfunction App() {\n  //Local storage\n  let localTodos = [];\n  useEffect(() => {\n    if (JSON.parse(window.localStorage.getItem(\"localTodo\"))) {\n      localTodos = JSON.parse(localStorage.getItem(\"localTodo\"));\n      setTodo(localTodos);\n      ref.current.focus();\n    }\n  }, []);\n\n  const ref = useRef(null);\n  const [input, setInput] = useState(\"\");\n  const [todo, setTodo] = useState([]);\n  const [select, setSelect] = useState(\"All\");\n  const [filterList, setFilterList] = useState([]);\n  const [loading, setloading] = useState(false);\n  const [edit, setEdit] = useState(false);\n  const [geteditId, setgeteditId] = useState(null);\n\n  useEffect(() => {\n    window.localStorage.setItem(\"localTodo\", JSON.stringify(todo));\n  }, []);\n\n  const dropDownHandler = () => {\n    switch (select) {\n      case \"Completed\":\n        setFilterList(todo.filter((data) => data.completed === true));\n        break;\n      case \"Uncompleted\":\n        setFilterList(todo.filter((data) => data.completed === false));\n        break;\n      default:\n        return setFilterList(todo);\n    }\n  };\n\n  useEffect(() => {\n    dropDownHandler();\n  }, [select, todo]);\n\n  const addTodoHandler = () => {\n    if (ref.current.value !== \"\") {\n      setloading(true);\n      setTimeout(() => {\n        setloading(false);\n      }, 200);\n\n      if (edit && geteditId) {\n        setTodo(\n          todo.map((data) => {\n            if (data.id.toString() === geteditId) {\n              return { ...data, text: input };\n            }\n            return data;\n          })\n        );\n        setEdit(false);\n      } else {\n        setTodo([\n          ...todo,\n          {\n            text: input,\n            id: Math.floor(Math.random() * 1000),\n            completed: false,\n          },\n        ]);\n      }\n    }\n    setInput(\"\");\n    ref.current.focus();\n  };\n\n  const inputAttrs = {\n    onKeyPress: (event) => {\n      if (event.charCode === 13) {\n        addTodoHandler();\n      }\n    },\n  };\n\n  return (\n    <>\n      <div className=\"weather-list\">\n        <WeatherEngine intialSearch=\"\" />\n        <WeatherEngine intialSearch=\"94086\" />\n        <WeatherEngine intialSearch=\"Hyderabad\" />\n        <WeatherEngine intialSearch=\"Barrow\" />\n      </div>\n\n      <div className=\"todo-app\">\n        <div className=\"text-field-dropdown\">\n          <TextField\n            buttonLabel={!edit ? \"Add Todo\" : \"Update\"}\n            input={input}\n            clickHandler={addTodoHandler}\n            setInput={setInput}\n            ref={ref}\n            inputAttrs={inputAttrs}\n            loading={loading}\n          />\n          <DropDown setSelect={setSelect} select={select} />\n        </div>\n        {!edit ? (\n          <TodoList\n            todo={todo}\n            input={input}\n            setInput={setInput}\n            filterList={filterList}\n            setTodo={setTodo}\n            edit={edit}\n            setEdit={setEdit}\n            inputRef={ref}\n            setgeteditId={setgeteditId}\n            geteditId={geteditId}\n          />\n        ) : (\n          <Loading text=\"Editing\" />\n        )}\n      </div>\n      <GetRandomUser />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}